name: Rust

on:
  push:
    tags:
      - '*'

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Existing targets here
          - TARGET: i686-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: default
          - TARGET: x86_64-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: aarch64-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: armv7-unknown-linux-musleabihf
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: armv7-unknown-linux-musleabi
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: arm-unknown-linux-musleabihf
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: arm-unknown-linux-musleabi
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: x86_64-apple-darwin
            OS: macos-latest
            FEATURES: ring-cipher,wss
          - TARGET: aarch64-apple-darwin
            OS: macos-latest
            FEATURES: ring-cipher,wss
          - TARGET: i686-pc-windows-msvc
            OS: windows-2019
            FEATURES: ring-cipher,wss
          - TARGET: x86_64-pc-windows-msvc
            OS: windows-latest
            FEATURES: ring-cipher,wss
          - TARGET: mipsel-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: mips-unknown-linux-musl
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          # ARMv5 Soft Float
          - TARGET: armv5te-unknown-linux-gnueabi
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          # ARMv5 Hard Float
          - TARGET: armv5te-unknown-linux-gnueabihf
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss

    runs-on: ${{ matrix.OS }}
    env:
      NAME: vnt-cli
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
      FEATURES: ${{ matrix.FEATURES }}

    steps:
      - uses: actions/checkout@v3

      - name: Init submodules
        uses: snickerbockers/submodules-init@v4

      - name: Cache Cargo registry and target
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ./target
          key: cargo-${{ matrix.TARGET }}-${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            cargo-${{ matrix.TARGET }}-${{ runner.os }}-

      - name: Setup dependencies for cross-compilation
        run: |
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get update && sudo apt-get install -y \
              clang llvm libc6-dev-i386 crossbuild-essential-arm64 crossbuild-essential-armhf \
              musl-tools libboost-all-dev libc6-dev
            case $TARGET in
              mipsel-unknown-linux-musl)
                MUSL_URI=mipsel-linux-musl-cross
                ;;
              aarch64-unknown-linux-musl)
                MUSL_URI=aarch64-linux-musl-cross
                ;;
              armv7-unknown-linux-musleabihf)
                MUSL_URI=armv7l-linux-musleabihf-cross
                ;;
              armv7-unknown-linux-musleabi)
                MUSL_URI=armv7m-linux-musleabi-cross
                ;;
              arm-unknown-linux-musleabihf)
                MUSL_URI=arm-linux-musleabihf-cross
                ;;
              arm-unknown-linux-musleabi)
                MUSL_URI=arm-linux-musleabi-cross
                ;;
              mips-unknown-linux-musl)
                MUSL_URI=mips-linux-musl-cross
                ;;
              armv5te-unknown-linux-gnueabi)
                MUSL_URI=armv5te-linux-gnueabi-cross
                ;;
              armv5te-unknown-linux-gnueabihf)
                MUSL_URI=armv5te-linux-gnueabihf-cross
                ;;
            esac
            if [[ -n "$MUSL_URI" ]]; then
              mkdir -p ./musl_gcc
              wget -c https://musl.cc/$MUSL_URI.tgz -P ./musl_gcc/
              tar -zxf ./musl_gcc/$MUSL_URI.tgz -C ./musl_gcc/
              sudo ln -s $(pwd)/musl_gcc/$MUSL_URI/bin/*gcc /usr/bin/
            fi
          fi
          rustup install stable
          rustup default stable
          rustup target add $TARGET

      - name: Build vn-link-cli
        run: cargo build --package vn-link-cli --release --verbose --target $TARGET --features $FEATURES

      - name: Build vnt-cli
        run: cargo build --package vnt-cli --release --verbose --target $TARGET --features $FEATURES

      - name: List target artifacts
        run: find ./target

      - name: Compress and Archive Artifacts
        run: |
          mkdir -p ./artifacts
          EXEC_VNT_CLI=${TARGET} == 'windows' && 'vnt-cli.exe' || 'vnt-cli'
          EXEC_VN_LINK_CLI=${TARGET} == 'windows' && 'vn-link-cli.exe' || 'vn-link-cli'

          mv ./target/$TARGET/release/$EXEC_VNT_CLI ./artifacts/$EXEC_VNT_CLI
          mv ./target/$TARGET/release/$EXEC_VN_LINK_CLI ./artifacts/$EXEC_VN_LINK_CLI
          mv ./README ./artifacts/README.txt
          cd ./artifacts
          tar -czf vnt-$TARGET-$GITHUB_SHA.tar.gz *

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vnt-cli
          path: ./artifacts

  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: vnt-cli
          path: ./artifacts

      - name: Release to GitHub Releases
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./artifacts/*.tar.gz
          tag: ${{ github.ref }}
          overwrite: true
